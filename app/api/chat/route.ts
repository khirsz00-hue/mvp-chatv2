import { NextResponse } from 'next/server'
import OpenAI from 'openai'

export const runtime = 'nodejs'

export async function POST(req: Request) {
  try {
    const { message, token, tasks: providedTasks, mode, taskId } = await req.json()

    if (!message) {
      return NextResponse.json({ error: 'Brak wiadomo≈õci' }, { status: 400 })
    }

    const lower = message.toLowerCase()
    let tasks: any[] = []

    // üîπ Zakres filtracji (opcjonalny, tylko dla Todoist)
    let filter = ''
    if (lower.includes('jutro')) filter = 'tomorrow'
    else if (lower.includes('tydzie≈Ñ') || lower.includes('tydzien')) filter = '7 days'
    else if (lower.includes('miesiƒÖc') || lower.includes('miesiac')) filter = '30 days'
    else if (lower.includes('przeterminowane')) filter = 'overdue'
    else filter = 'today'

    // üß© Pobranie lub u≈ºycie zada≈Ñ (je≈õli tryb Todoist)
    if (token) {
      if (providedTasks && providedTasks.length > 0) {
        console.log(`üì¶ Otrzymano ${providedTasks.length} zada≈Ñ z frontu.`)
        tasks = providedTasks
      } else {
        console.log('üåê Brak zada≈Ñ z frontu ‚Äî pobieram z Todoista...')
        const res = await fetch('https://api.todoist.com/rest/v2/tasks', {
          headers: { Authorization: `Bearer ${token}` },
        })
        if (!res.ok) throw new Error(`Todoist API error: ${res.status}`)
        tasks = await res.json()
        console.log(`‚úÖ Znaleziono zada≈Ñ w Todoist: ${tasks.length}`)
      }
    } else if (providedTasks?.length) {
      tasks = providedTasks
    }

    // üîß Przygotowanie promptu kontekstowego
    const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! })

    let systemPrompt = ''

    if (mode === 'task') {
      systemPrompt = `
Jeste≈õ inteligentnym asystentem pomagajƒÖcym u≈ºytkownikowi w realizacji konkretnego zadania.
Nie masz dostƒôpu do Todoist.
Zachowuj siƒô jak osobisty doradca ‚Äì pomagaj rozwiƒÖzaƒá problem krok po kroku, zadawaj pytania u≈õci≈õlajƒÖce, podpowiadaj mo≈ºliwe dzia≈Çania.
`.trim()
    } else if (token) {
      const taskList =
        tasks.length > 0
          ? tasks
              .map((t) => `- ${t.content}${t.due?.date ? ` (termin: ${t.due.date})` : ''}`)
              .join('\n')
          : '(Brak zada≈Ñ w Todoist)'

      systemPrompt = `
Jeste≈õ inteligentnym asystentem produktywno≈õci zintegrowanym z Todoist.
Zasady:
- Odpowiadasz po polsku.
- Je≈õli u≈ºytkownik prosi o "pogrupowanie", utw√≥rz logiczne kategorie (np. Finanse, IT, Sprawy osobiste).
- Nie wymy≈õlaj nowych zada≈Ñ spoza listy.
- Je≈õli nie masz danych, popro≈õ u≈ºytkownika o kontekst.
Dostƒôpne zadania:
${taskList}
`.trim()
    } else {
      systemPrompt = `
Jeste≈õ przyjaznym asystentem AI pomagajƒÖcym u≈ºytkownikowi w planowaniu i organizacji pracy.
`.trim()
    }

    // üß† Zapytanie do OpenAI
    const completion = await client.chat.completions.create({
      model: 'gpt-4o-mini',
      temperature: 0.7,
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: message },
      ],
    })

    const reply = completion.choices[0]?.message?.content?.trim() || 'ü§ñ Brak odpowiedzi od AI.'
    console.log('üí¨ Odpowied≈∫ AI:', reply.slice(0, 200))

    return NextResponse.json({
      success: true,
      content: reply,
      timestamp: Date.now(),
    })
  } catch (err: any) {
    console.error('‚ùå B≈ÇƒÖd /api/chat:', err)
    return NextResponse.json({ error: err.message, type: 'error' }, { status: 500 })
  }
}
