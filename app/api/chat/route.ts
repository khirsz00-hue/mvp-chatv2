// ğŸ“œ Typ wiadomoÅ›ci â€“ definiujemy lokalnie
type SimpleChatMessage = {
  role: 'system' | 'user' | 'assistant'
  content: string
}

// ğŸ“œ Konwersacja â€“ historia + wiadomoÅ›Ä‡ uÅ¼ytkownika
const conversation: SimpleChatMessage[] = Array.isArray(history)
  ? history.slice(-10).map((msg: any) => ({
      role: msg.role === 'assistant' ? 'assistant' : 'user',
      content: String(msg.content || ''),
    }))
  : []

// ğŸ§  KONTEKST â€” wstrzykniÄ™cie tytuÅ‚u zadania jako osobnej wiadomoÅ›ci systemowej
const contextIntro: SimpleChatMessage[] =
  mode === 'task' || mode === 'help'
    ? [
        {
          role: 'system',
          content: `Kontekst rozmowy: pomagaj uÅ¼ytkownikowi w zadaniu o nazwie "${taskId || 'Nieznane zadanie'}". 
Zawsze traktuj to jako gÅ‚Ã³wny temat caÅ‚ej rozmowy. 
Odpowiadaj konkretnie w kontekÅ›cie tego zadania.`,
        },
      ]
    : []

// ğŸ§© Kompletna sekwencja wiadomoÅ›ci dla OpenAI
const messages: SimpleChatMessage[] = [
  { role: 'system', content: systemPrompt },
  ...contextIntro,
  ...conversation,
  {
    role: 'user',
    content:
      mode === 'task' || mode === 'help'
        ? `UÅ¼ytkownik pisze w kontekÅ›cie zadania "${taskId || 'Nieznane zadanie'}": ${message}`
        : message,
  },
]

// ğŸ§  Zapytanie do OpenAI
const completion = await client.chat.completions.create({
  model: 'gpt-4o-mini',
  temperature: 0.7,
  messages,
})

const reply = completion.choices[0]?.message?.content?.trim() || 'ğŸ¤– Brak odpowiedzi od AI.'
console.log('ğŸ’¬ OdpowiedÅº AI:', reply.slice(0, 200))

return NextResponse.json({
  success: true,
  content: reply,
  timestamp: Date.now(),
})
